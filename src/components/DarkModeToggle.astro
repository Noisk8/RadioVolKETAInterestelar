---
---
<mode-toggle class="flex">
  <button
    class="mode-toggle-button"
    id="mode-toggle"
    role="switch"
    type="button"
    tabindex="0"
    aria-checked="false"
    data-headlessui-state=""
  >
    <span class="sr-only">Alternar tema</span>
    <span id="mode-circle" class="toggle-indicator">
      <span class="toggle-icon toggle-icon--sun" aria-hidden="true">☀</span>
      <span class="toggle-icon toggle-icon--moon" aria-hidden="true">☾</span>
    </span>
  </button>
</mode-toggle>

<script>
  function updateHTMLTheme(mode: "light" | "dark") {
    const themeColorMetaTag = document.head.querySelector(
      'meta[name="theme-color"]'
    );

    if (mode === "dark") {
      document.documentElement.classList.remove("light");
      document.documentElement.classList.add("dark");
      if (themeColorMetaTag) {
        // @ts-ignore
        themeColorMetaTag.content = "#12110E";
      }
    } else {
      document.documentElement.classList.remove("dark");
      document.documentElement.classList.add("light");
      if (themeColorMetaTag) {
        // @ts-ignore
        themeColorMetaTag.content = "#f8f5e8";
      }
    }
  }
  function updateStorageTheme(mode: "light" | "dark") {
    if (mode === "dark") {
      sessionStorage.setItem("theme", "dark");
    } else {
      sessionStorage.setItem("theme", "light");
    }
  }
  class ModeToggle extends HTMLElement {
    constructor() {
      super();
      let currentMode: "light" | "dark" =
        document.documentElement.classList.contains("dark") ? "dark" : "light";

      const toggle = this.querySelector("button");
      const iconElem = toggle?.querySelector("#mode-circle");

      if (iconElem) {
        iconElem.classList.add(currentMode === "dark" ? "is-dark" : "is-light");

        toggle?.addEventListener("click", () => {
          if (currentMode === "dark") {
            const modeToSwitch = "light";
            iconElem.classList.remove("is-dark");
            iconElem.classList.add("is-light");
            updateHTMLTheme(modeToSwitch);
            updateStorageTheme(modeToSwitch);
            currentMode = modeToSwitch;
          } else {
            const modeToSwitch = "dark";
            iconElem.classList.remove("is-light");
            iconElem.classList.add("is-dark");
            updateHTMLTheme(modeToSwitch);
            updateStorageTheme(modeToSwitch);
            currentMode = modeToSwitch;
          }
        });
      }
    }
  }

  customElements.define("mode-toggle", ModeToggle);
</script>

<style>
  .mode-toggle-button {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 3.5rem;
    height: 2rem;
    border-radius: 999px;
    border: 1.5px solid rgb(var(--color-border-ink));
    background: rgb(var(--color-bg-card));
    box-shadow: 4px 4px 0 rgba(var(--shadow-soft) / 0.15);
    transition: transform 0.2s ease;
  }

  .mode-toggle-button:focus-visible {
    outline: 2px solid rgba(var(--color-border-ink) / 0.6);
    outline-offset: 3px;
  }

  .mode-toggle-button:hover {
    transform: translateY(-1px);
  }

  .toggle-indicator {
    position: relative;
    width: 1.5rem;
    height: 1.5rem;
    border-radius: 50%;
    background: rgb(var(--color-primary-yellow));
    display: grid;
    place-items: center;
    transition: transform 0.35s ease, background 0.35s ease;
  }

  .toggle-indicator.is-dark {
    transform: translateX(0.8rem);
    background: rgb(31 29 25 / 0.85);
    color: rgb(var(--color-primary-blue));
  }

  .toggle-indicator.is-light {
    transform: translateX(-0.8rem);
  }

  .toggle-icon {
    position: absolute;
    font-size: 0.85rem;
    opacity: 0;
    transition: opacity 0.15s ease;
  }

  .toggle-icon--sun {
    opacity: 1;
  }

  .toggle-indicator.is-dark .toggle-icon--sun {
    opacity: 0;
  }

  .toggle-indicator.is-dark .toggle-icon--moon {
    opacity: 1;
    color: rgb(var(--color-primary-yellow));
  }
</style>
