---
// Variable para título inicial
let tituloInicial = "Radio Volketa Interestelar";

// Intentar obtener datos iniciales
try {
  const respuesta = await fetch('http://82.25.92.57:8001/status-json.xsl');
  const data = await respuesta.json();
  if (data && data.icestats && data.icestats.source) {
    const source = Array.isArray(data.icestats.source) 
      ? data.icestats.source[0] 
      : data.icestats.source;

    if (source.title) {
      tituloInicial = source.title;
    }
  }
} catch (error) {
  console.error("Error al obtener datos de la API:", error);
}
---

<div class="flex flex-col md:flex-row min-h-screen p-4 gap-4">
  <!-- Left Column - Radio Player -->
  <div class="w-full md:w-1/2">
    <div class="max-w-md mx-auto mb-8 text-center"> 
      <h1 class="text-2xl font-bold mb-4 dark:text-white text-gray-800">
        Escuchar Radio Volketa Interestelar
      </h1>
      <audio 
        id="radio-player"
        src="http://82.25.92.57:8001/radiovolketainterestelar.ogg"
        controls
        crossorigin="anonymous"
        autoplay 
        class="w-full rounded-lg shadow-md"
      >
        <!-- Fuente alternativa usando proxy HTTPS -->
        <source src="https://cors.bitwize.com.lb/http://82.25.92.57:8001/radiovolketainterestelar.ogg" type="application/ogg">
        <!-- Mensaje si el navegador no soporta audio -->
        <p>Tu navegador no soporta el elemento audio. Por favor actualiza tu navegador.</p>
      </audio>
    </div>

    <div class="text-center mb-4">
      <p class="text-sm text-gray-600 space-y-2">
        <span class="block">Si el reproductor no funciona:</span>
        <a href="http://82.25.92.57:8001/radiovolketainterestelar.ogg" target="_blank" class="inline-block px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors">
          Acceder al stream directamente
        </a>
      </p>
    </div>

    <!-- Información de la canción actual -->
    <div id="current-song" class="text-center mb-6 p-4 bg-gray-800 rounded-lg transform transition-all duration-300">
      <h2 class="text-xl font-semibold text-white mb-2">Reproduciendo ahora:</h2>
      <div class="song-info-container p-3 rounded-lg">
        <p class="text-gray-300 text-lg font-medium transition-all duration-300" id="song-title">{tituloInicial}</p>
        <p class="text-gray-400 text-sm mt-1 transition-all duration-300" id="artist-name">Transmitiendo en vivo</p>
      </div>
    </div>
  </div>

  <!-- Right Column - Chat -->
  <div class="w-full md:w-1/2">
    <div id="tlkio" data-channel="RadioVolketa" data-theme="theme--night" class="w-full h-[600px]"></div>
  </div>
</div>

<client:load>
  <script type="module">
    // Variables globales para manejar el estado
    let tituloActual = document.getElementById('song-title')?.textContent || "";
    let artistaActual = document.getElementById('artist-name')?.textContent || "";
    
    async function actualizarCancion() {
      try {
        console.log('Intentando obtener datos de canción...');
        const response = await fetch('http://82.25.92.57:8001/status-json.xsl');
        const data = await response.json();
        
        // Actualizar solo si hay cambios
        if (data && data.icestats && data.icestats.source) {
          const source = Array.isArray(data.icestats.source) 
            ? data.icestats.source[0] 
            : data.icestats.source;

          if (source.title || source.artist) {
            const songTitleElement = document.getElementById('song-title');
            const artistNameElement = document.getElementById('artist-name');
            
            if (songTitleElement && source.title !== tituloActual) {
              songTitleElement.textContent = source.title || "Radio Volketa Interestelar";
              songTitleElement.classList.add('text-highlight');
              setTimeout(() => songTitleElement.classList.remove('text-highlight'), 1000);
              tituloActual = source.title;
            }
            
            if (artistNameElement && source.artist !== artistaActual) {
              artistNameElement.textContent = source.artist || "Transmitiendo en vivo";
              artistNameElement.classList.add('text-highlight');
              setTimeout(() => artistNameElement.classList.remove('text-highlight'), 1000);
              artistaActual = source.artist;
            }
          }
        }
        
        console.log('Actualización completada');
      } catch (error) {
        console.error('Error al actualizar canción:', error);
      }
    }

    // Actualizar inmediatamente al cargar
    actualizarCancion();
    
    // Actualizar cada 15 segundos para no sobrecargar el servidor
    setInterval(actualizarCancion, 15000);

    // También actualizar cuando el reproductor comienza a reproducir
    const player = document.getElementById('radio-player');
    if (player) {
      player.addEventListener('play', actualizarCancion);
    }
  </script>
  <div class="h-96 w-full flex items-center justify-center" id="tlkio-container">
    <div class="animate-pulse flex flex-col items-center">
      <div class="h-6 w-48 bg-gray-300 rounded-full"></div>
      <div class="h-4 w-1/2 bg-gray-300 rounded-full my-2"></div>
      <div class="h-4 w-1/4 bg-gray-300 rounded-full my-2"></div>
      <p class="text-gray-600">Cargando chat...</p>
    </div>
  </div>
  <script async src="https://tlk.io/embed.js" type="text/javascript"></script>

  <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">

<style>
  /* Efectos visuales para actualizaciones */
  .text-highlight {
    color: #fff !important;
    text-shadow: 0 0 15px rgba(255, 255, 255, 0.9);
    transition: all 0.3s ease;
  }
  
  .update-container {
    box-shadow: 0 0 20px rgba(255, 255, 255, 0.4);
    transform: scale(1.02);
    transition: all 0.3s ease;
  }
  
  #current-song {
    transition: all 0.3s ease;
    overflow: hidden;
  }
  
  #song-title, #artist-name {
    transition: all 0.3s ease;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
</style>
