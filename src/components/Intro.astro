---
// Variable para título inicial
let tituloInicial = "Radio Volketa Interestelar";

// Intentar obtener datos iniciales
try {
  const respuesta = await fetch('http://srv788502.hstgr.cloud:8001/status-json.xsl');
  const data = await respuesta.json();
  if (data && data.icestats && data.icestats.source) {
    const source = Array.isArray(data.icestats.source) 
      ? data.icestats.source[0] 
      : data.icestats.source;

    if (source.title) {
      tituloInicial = source.title;
    }
  }
} catch (error) {
  console.error("Error al obtener datos de la API:", error);
}
---

<head>
  <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
</head>

<div class="flex flex-col md:flex-row min-h-screen p-4 gap-4">
  <!-- Left Column - Radio Player -->
  <div class="w-full md:w-1/2">
    <div class="max-w-md mx-auto mb-8 text-center"> 
      <h1 class="text-2xl font-bold mb-4 dark:text-white text-gray-800">
        Escuchar Radio Volketa Interestelar
      </h1>
      <div id="player-container" class="relative">
        <audio 
          id="radio-player"
          src="https://stream.p-node.org/contretemps.mp3"
          controls
          crossorigin="anonymous"
          preload="none"
          class="w-full rounded-lg shadow-md"
        >
     
        </audio>
        <!-- <div id="loading-overlay" class="invisible opacity-0 absolute inset-0 bg-black bg-opacity-50 rounded-lg flex items-center justify-center transition-all duration-300">
          <div class="text-white text-center p-4">
            <div class="loading-spinner mb-2"></div>
            <p>Cargando stream...</p>
          </div>
        </div> -->
      </div>
    </div>

    <div class="text-center mb-4">
      <div class="space-y-4">
        <!-- <p class="text-sm text-gray-600">
          <span class="block font-medium mb-2">¿Problemas con el reproductor?</span>
          <span class="block text-xs text-gray-500 mb-2">Prueba estas alternativas:</span>
        </p> -->
        <!-- <div class="flex flex-col gap-2">
          <a href="http://srv788502.hstgr.cloud:8001/radiovolketainterestelar.ogg" 
             target="_blank" 
             rel="noopener noreferrer"
             class="inline-block px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors">
            Escuchar en nueva ventana
          </a>
        </div> -->
        <p class="text-xs text-gray-500 mt-2">
          Si el reproductor no funciona, intenta usar un navegador diferente o actualiza la página
        </p>
      </div>
    </div>

    <!-- Información de la canción actual -->
    <!-- <div id="current-song" class="text-center mb-6 p-4 bg-gray-800 rounded-lg transform transition-all duration-300">
      <h2 class="text-xl font-semibold text-white mb-2">Reproduciendo ahora:</h2>
      <div class="song-info-container p-3 rounded-lg">
        <p class="text-gray-300 text-lg font-medium transition-all duration-300" id="song-title">{tituloInicial}</p>
        <p class="text-gray-400 text-sm mt-1 transition-all duration-300" id="artist-name">Transmitiendo en vivo</p>
      </div>
    </div> -->
  </div>

  <!-- Right Column - Chat -->
  <div class="w-full md:w-1/2">
    <div id="tlkio" data-channel="RadioVolketa" data-theme="theme--night" class="w-full h-[600px]"></div>
  </div>
</div>

<client:load>
  <script type="module">
    const player = document.getElementById('radio-player');
    const loadingOverlay = document.getElementById('loading-overlay');
    
    function showLoading() {
      loadingOverlay.classList.remove('invisible', 'opacity-0');
    }

    function hideLoading() {
      loadingOverlay.classList.add('invisible', 'opacity-0');
    }

    // Mostrar overlay de carga
    player.addEventListener('loadstart', showLoading);
    player.addEventListener('waiting', showLoading);

    // Ocultar overlay cuando comienza la reproducción
    player.addEventListener('playing', hideLoading);
    player.addEventListener('canplay', hideLoading);

    // Manejar errores
    player.addEventListener('error', (e) => {
      console.error('Error en el reproductor:', e);
      loadingOverlay.innerHTML = `
        <div class="text-white text-center p-4">
          <p class="text-lg mb-2">Error al cargar el stream</p>
          <p class="text-sm mb-4">El reproductor no pudo conectarse al stream</p>
          <div class="space-y-2">
            <button onclick="location.reload()" class="px-4 py-2 bg-blue-500 rounded hover:bg-blue-600 transition-colors">
              Reintentar
            </button>
            <a href="http://srv788502.hstgr.cloud:8001/radiovolketainterestelar.ogg" 
               target="_blank"
               class="block px-4 py-2 bg-green-500 rounded hover:bg-green-600 transition-colors">
              Abrir en nueva ventana
            </a>
          </div>
        </div>
      `;
      showLoading();
    });

    let tituloActual = document.getElementById('song-title')?.textContent || "";
    let artistaActual = document.getElementById('artist-name')?.textContent || "";
    
    async function actualizarCancion() {
      try {
        console.log('Intentando obtener datos de canción...');
        const response = await fetch('http://srv788502.hstgr.cloud:8001/status-json.xsl');
        const data = await response.json();
        
        if (data && data.icestats && data.icestats.source) {
          const source = Array.isArray(data.icestats.source) 
            ? data.icestats.source[0] 
            : data.icestats.source;

          if (source.title || source.artist) {
            const songTitleElement = document.getElementById('song-title');
            const artistNameElement = document.getElementById('artist-name');
            
            if (songTitleElement && source.title !== tituloActual) {
              songTitleElement.textContent = source.title || "Radio Volketa Interestelar";
              songTitleElement.classList.add('text-highlight');
              setTimeout(() => songTitleElement.classList.remove('text-highlight'), 1000);
              tituloActual = source.title;
            }
            
            if (artistNameElement && source.artist !== artistaActual) {
              artistNameElement.textContent = source.artist || "Transmitiendo en vivo";
              artistNameElement.classList.add('text-highlight');
              setTimeout(() => artistNameElement.classList.remove('text-highlight'), 1000);
              artistaActual = source.artist;
            }
          }
        }
        
        console.log('Actualización completada');
      } catch (error) {
        console.error('Error al actualizar canción:', error);
      }
    }

    // Actualizar inmediatamente al cargar
    actualizarCancion();
    
    // Actualizar cada 15 segundos
    setInterval(actualizarCancion, 15000);
  </script>
  <div class="h-96 w-full flex items-center justify-center" id="tlkio-container">
    <div class="animate-pulse flex flex-col items-center">
      <div class="h-6 w-48 bg-gray-300 rounded-full"></div>
      <div class="h-4 w-1/2 bg-gray-300 rounded-full my-2"></div>
      <div class="h-4 w-1/4 bg-gray-300 rounded-full my-2"></div>
      <p class="text-gray-600">Cargando chat...</p>
    </div>
  </div>
  <script async src="https://tlk.io/embed.js" type="text/javascript"></script>

  <style>
    .loading-spinner {
      width: 30px;
      height: 30px;
      border: 3px solid #f3f3f3;
      border-top: 3px solid #3498db;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin: 0 auto;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Efectos visuales para actualizaciones */
    .text-highlight {
      color: #fff !important;
      text-shadow: 0 0 15px rgba(255, 255, 255, 0.9);
      transition: all 0.3s ease;
    }
    
    .update-container {
      box-shadow: 0 0 20px rgba(255, 255, 255, 0.4);
      transform: scale(1.02);
      transition: all 0.3s ease;
    }
    
    #current-song {
      transition: all 0.3s ease;
      overflow: hidden;
    }
    
    #song-title, #artist-name {
      transition: all 0.3s ease;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
  </style>
</client:load>
