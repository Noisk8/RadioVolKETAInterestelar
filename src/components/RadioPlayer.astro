---
const STREAM_URL = "https://stream.p-node.org/contretemps.mp3";
const STATUS_URL = "http://srv788502.hstgr.cloud:8001/status-json.xsl";

interface StreamInfo {
  title?: string;
  artist?: string;
}

let current: StreamInfo = {
  title: "KBalah",
  artist: "Transmitiendo en vivo",
};

try {
  const response = await fetch(STATUS_URL);
  if (response.ok) {
    const data = await response.json();
    const source = Array.isArray(data?.icestats?.source)
      ? data?.icestats?.source?.[0]
      : data?.icestats?.source;

    if (source) {
      current = {
        title: source.title || current.title,
        artist: source.artist || current.artist,
      };
    }
  }
} catch (error) {
  console.error("No se pudo obtener el t√≠tulo inicial del stream", error);
}
---

<section class="radio-shell">
  <div class="radio-content">
    <header class="radio-headline">
      <div class="eq-badge" aria-hidden="true">
        <span class="eq-bar" style="animation-delay: 0ms"></span>
        <span class="eq-bar" style="animation-delay: 120ms"></span>
        <span class="eq-bar" style="animation-delay: 240ms"></span>
        <span class="eq-bar" style="animation-delay: 360ms"></span>
        <span class="eq-bar" style="animation-delay: 480ms"></span>
      </div>
      <div class="radio-titles">
  
        <h2 id="song-title">{current.title}</h2>
        <p id="artist-name">{current.artist}</p>
      </div>
    </header>


      <audio
        id="radio-player"
        class="w-full bg-transparent px-6 pb-6 pt-12"
        src={STREAM_URL}
        preload="none"
        crossorigin="anonymous"
      ></audio>
    

    <div class="player-foot">
      <div class="timeline-row">
        <span id="player-elapsed" class="time-chip">00:00</span>
        <div class="timeline-track">
          <div class="progress-track">
            <div id="player-progress-fill" class="progress-fill"></div>
          </div>
          <input
            id="player-progress"
            type="range"
            min="0"
            value="0"
            step="1"
            class="progress-range"
            aria-label="Avance de la pista"
          />
        </div>
        <span id="player-remaining" class="time-chip live-indicator">Fuera de aire</span>
      </div>

      <div class="action-row">
        <button
          id="player-toggle"
          class="player-control is-offline"
          type="button"
          aria-label="Reproducir"
        >
          <span class="player-symbol">
            <span class="player-icon" aria-hidden="true"></span>
          </span>
          <span class="player-label">Play</span>
        </button>

        <div class="volume-block">
          <span class="volume-kicker">Volumen</span>
          <div class="volume-control">
            <span class="fa-solid fa-volume-low" aria-hidden="true"></span>
            <input
              id="player-volume"
              type="range"
              min="0"
              max="1"
              step="0.05"
              value="0.8"
              class="volume-range"
              aria-label="Volumen"
            />
          </div>
        </div>

      </div>
    </div>
  </div>
</section>

<client:load>
  <script type="module">
    const STATUS_URL = "http://srv788502.hstgr.cloud:8001/status-json.xsl";
    const player = document.getElementById("radio-player");
    const titleEl = document.getElementById("song-title");
    const artistEl = document.getElementById("artist-name");
    const toggleButton = document.getElementById("player-toggle");
    const progressInput = document.getElementById("player-progress");
    const progressFill = document.getElementById("player-progress-fill");
    const elapsedLabel = document.getElementById("player-elapsed");
    const remainingLabel = document.getElementById("player-remaining");
    const volumeInput = document.getElementById("player-volume");
    const labelSpan = toggleButton?.querySelector(".player-label");
    const panelContainer = document.querySelector(".radio-content");
    const LIVE_INDICATOR_TEXT = "EN VIVO";
    const OFFLINE_INDICATOR_TEXT = "Fuera de aire";

    const formatTime = (secs) => {
      if (!Number.isFinite(secs) || secs < 0) return "";
      const total = Math.floor(secs);
      const hours = Math.floor(total / 3600);
      const minutes = Math.floor((total % 3600) / 60)
        .toString()
        .padStart(2, "0");
      const seconds = Math.floor(total % 60)
        .toString()
        .padStart(2, "0");
      if (hours > 0) {
        return `${hours.toString().padStart(2, "0")}:${minutes}:${seconds}`;
      }
      return `${minutes}:${seconds}`;
    };

    let isLiveStream = false;

    const togglePlayer = () => {
      if (!player) return;
      if (player.paused) {
        player.play().catch((error) => {
          console.error("No fue posible iniciar el stream", error);
        });
      } else {
        player.pause();
      }
    };

    const setLiveState = (isLive) => {
      if (!toggleButton) return;
      toggleButton.dataset.live = isLive ? "on" : "off";
      toggleButton.classList.toggle("is-live", isLive);
      toggleButton.classList.toggle("is-offline", !isLive);
      panelContainer?.classList.toggle("is-live", isLive);
    };

    const updateDurationState = () => {
      if (!player) return;
      const { duration } = player;
      const durationIsFinite = Number.isFinite(duration) && duration > 0;
      const durationIsUnknown = Number.isNaN(duration);
      const live = !durationIsUnknown && !Number.isFinite(duration);
      const offline = durationIsUnknown || duration <= 0;

      isLiveStream = live;

      if (progressInput) {
        const disableProgress = live || offline || !durationIsFinite;
        progressInput.disabled = disableProgress;
        progressInput.classList.toggle("is-disabled", disableProgress);
        if (!disableProgress && durationIsFinite) {
          progressInput.max = Math.floor(duration).toString();
        }
      }

      if (remainingLabel) {
        if (live) {
          remainingLabel.textContent = LIVE_INDICATOR_TEXT;
        } else if (offline) {
          remainingLabel.textContent = OFFLINE_INDICATOR_TEXT;
        } else {
          remainingLabel.textContent = formatTime(duration);
        }
        remainingLabel.classList.toggle("live-active", live);
        remainingLabel.classList.toggle("live-offline", !live && offline);
        if (!live && !offline) {
          remainingLabel.classList.remove("live-offline");
        }
      }
    };

    const updateProgressUI = (fromSlider = false) => {
      if (!player) return;
      const current = fromSlider && progressInput ? Number(progressInput.value) : player.currentTime;

      if (elapsedLabel) {
        elapsedLabel.textContent = formatTime(current);
      }

      if (isLiveStream) {
        if (remainingLabel) {
          remainingLabel.textContent = LIVE_INDICATOR_TEXT;
          remainingLabel.classList.add("live-active");
          remainingLabel.classList.remove("live-offline");
        }
        if (progressFill) {
          const fraction = (player.currentTime % 8) / 8;
          progressFill.style.transform = `scaleX(${0.2 + fraction * 0.8})`;
        }
        return;
      }

      const duration = Number.isFinite(player.duration) && player.duration > 0 ? player.duration : null;
      if (duration === null) {
        if (progressFill) {
          progressFill.style.transform = "scaleX(0)";
        }
        if (progressInput && !fromSlider) {
          progressInput.value = "0";
        }
        if (remainingLabel) {
          remainingLabel.textContent = OFFLINE_INDICATOR_TEXT;
          remainingLabel.classList.remove("live-active");
          remainingLabel.classList.add("live-offline");
        }
        return;
      }

      const percent = Math.min(current / duration, 1);
      if (progressFill) {
        progressFill.style.transform = `scaleX(${percent})`;
      }
      if (progressInput && !fromSlider) {
        progressInput.value = current.toString();
      }
      if (remainingLabel) {
        const remaining = Math.max(duration - current, 0);
        remainingLabel.textContent = formatTime(remaining);
        remainingLabel.classList.remove("live-active");
        remainingLabel.classList.remove("live-offline");
      }
    };

    const updateToggleLabel = () => {
      if (!toggleButton || !player) return;
      const isPaused = player.paused;
      const actionLabel = isPaused ? "Reproducir" : "Detener";
      toggleButton.setAttribute("aria-label", actionLabel);
      toggleButton.classList.toggle("is-playing", !isPaused);
      if (labelSpan) {
        labelSpan.textContent = isPaused ? "Play" : "Stop";
      }
      setLiveState(!player.paused);
      updateProgressUI();
    };

    toggleButton?.addEventListener("click", () => {
      togglePlayer();
      setTimeout(updateToggleLabel, 50);
    });

    player?.addEventListener("play", () => {
      updateToggleLabel();
      updateDurationState();
      updateProgressUI();
    });
    player?.addEventListener("pause", () => {
      updateToggleLabel();
      updateDurationState();
      updateProgressUI();
    });

    player?.addEventListener("waiting", () => {});
    player?.addEventListener("loadstart", () => {
      updateDurationState();
    });
    player?.addEventListener("playing", () => {
      setLiveState(true);
      updateDurationState();
      updateProgressUI();
    });
    player?.addEventListener("canplay", () => {
      updateDurationState();
    });

    player?.addEventListener("error", () => {
      setLiveState(false);
      isLiveStream = false;
      if (progressFill) {
        progressFill.style.transform = "scaleX(0)";
      }
      if (progressInput) {
        progressInput.value = "0";
      }
      if (remainingLabel) {
        remainingLabel.textContent = OFFLINE_INDICATOR_TEXT;
        remainingLabel.classList.remove("live-active");
        remainingLabel.classList.add("live-offline");
      }
    });

    let currentTitle = titleEl?.textContent ?? "";
    let currentArtist = artistEl?.textContent ?? "";

    async function refreshNowPlaying() {
      try {
        const request = await fetch(STATUS_URL, { cache: "no-store" });
        if (!request.ok) return;

        const payload = await request.json();
        const source = Array.isArray(payload?.icestats?.source)
          ? payload.icestats.source[0]
          : payload?.icestats?.source;

        if (source && (source.title || source.artist)) {
          if (titleEl && source.title && source.title !== currentTitle) {
            titleEl.textContent = source.title;
            titleEl.classList.add("text-highlight");
            setTimeout(() => titleEl.classList.remove("text-highlight"), 600);
            currentTitle = source.title;
          }

          if (artistEl && source.artist && source.artist !== currentArtist) {
            artistEl.textContent = source.artist;
            artistEl.classList.add("text-highlight");
            setTimeout(() => artistEl.classList.remove("text-highlight"), 600);
            currentArtist = source.artist;
          }
        }
      } catch (error) {
        console.error("No se pudo refrescar la canci√≥n", error);
      }
    }

    refreshNowPlaying();
    setInterval(refreshNowPlaying, 15000);
    updateToggleLabel();
    setLiveState(false);

    player?.addEventListener("loadedmetadata", () => {
      updateDurationState();
      updateProgressUI();
    });
    player?.addEventListener("durationchange", updateDurationState);
    player?.addEventListener("timeupdate", () => updateProgressUI());

    progressInput?.addEventListener("input", () => {
      if (isLiveStream) return;
      updateProgressUI(true);
    });
    progressInput?.addEventListener("change", () => {
      if (!player || isLiveStream) return;
      const value = Number(progressInput.value);
      if (Number.isFinite(value)) {
        player.currentTime = value;
      }
    });

    if (volumeInput && player) {
      const initialVolume = Number(volumeInput.value);
      if (Number.isFinite(initialVolume)) {
        player.volume = initialVolume;
      }
      volumeInput.addEventListener("input", () => {
        const vol = Number(volumeInput.value);
        if (Number.isFinite(vol)) {
          player.volume = vol;
        }
      });
    }
  </script>

<style>
  .radio-shell {
    border: none;
    width: 100%;
  }

  .radio-content {
    position: relative;
    border: 1.5px solid rgb(var(--color-border-ink));
    background: rgb(var(--color-bg-card));
    box-shadow: 12px 12px 0 rgba(var(--shadow-soft) / 0.16);
    padding: clamp(1.9rem, 3.2vw, 2.8rem);
    display: grid;
    gap: clamp(1.8rem, 3vw, 2.4rem);
    justify-items: center;
  }

  .radio-headline {
    display: flex;
    flex-direction: column;
    gap: 1.25rem;
    align-items: center;
    text-align: center;
  }

  .headline-kicker {
    font-size: 0.75rem;
    letter-spacing: 0.35em;
    text-transform: uppercase;
    color: rgb(var(--color-text-muted));
  }

  .radio-titles {
    display: grid;
    gap: 0.35rem;
    justify-items: center;
  }

  .radio-titles h2 {
    font-size: clamp(2rem, 3vw, 2.6rem);
    font-weight: 600;
    color: rgb(var(--color-text-heading));
  }

  .radio-titles p {
    color: rgb(var(--color-text-muted));
    font-size: 0.95rem;
  }

  .eq-badge {
    display: inline-flex;
    align-items: flex-end;
    gap: 6px;
    border-radius: 16px;
    padding: 10px 14px;
    border: 1.5px solid rgb(var(--color-border-ink));
    background: rgb(var(--color-bg-body));
    box-shadow: 5px 5px 0 rgba(var(--shadow-soft) / 0.16);
  }

  .eq-bar {
    width: 5px;
    height: 22px;
    border-radius: 2px;
    background: linear-gradient(180deg, rgba(var(--color-primary-blue) / 0.9), rgba(var(--color-primary-pink) / 0.85));
    animation: eqPulse 1.6s ease-in-out infinite;
    transform-origin: center bottom;
  }

  @keyframes eqPulse {
    0%,
    100% {
      transform: scaleY(0.35);
      opacity: 0.7;
    }
    40% {
      transform: scaleY(1.1);
      opacity: 1;
    }
    70% {
      transform: scaleY(0.5);
      opacity: 0.85;
    }
  }

  .player-surface {
    position: relative;
    border: 1.5px solid rgb(var(--color-border-ink));
    background: rgb(var(--color-bg-elevated));
    padding: clamp(2rem, 4vw, 2.4rem) clamp(1.4rem, 4vw, 2rem) clamp(1.6rem, 4vw, 2rem);
    box-shadow: inset 0 0 0 1px rgba(var(--color-border-ink) / 0.08);
    width: min(100%, 520px);
  }

  .player-surface audio {
    position: absolute;
    opacity: 0;
    pointer-events: none;
    width: 0;
    height: 0;
  }

  .player-foot {
    display: grid;
    gap: clamp(1.4rem, 2.5vw, 2rem);
    width: min(100%, 520px);
  }

  .timeline-row {
    display: grid;
    grid-template-columns: auto 1fr auto;
    align-items: center;
    gap: 1rem;
  }

  .timeline-track {
    position: relative;
    width: 100%;
    height: 0.7rem;
    border-radius: 999px;
    border: 1.5px solid rgb(var(--color-border-ink));
    background: rgb(var(--color-bg-body));
    box-shadow: 3px 3px 0 rgba(var(--shadow-soft) / 0.12);
  }

  .progress-track {
    position: absolute;
    inset: 3px;
    border-radius: 999px;
    background: rgba(var(--color-border-ink) / 0.15);
    overflow: hidden;
    pointer-events: none;
  }

  .progress-fill {
    position: absolute;
    inset: 0;
    transform-origin: left center;
    transform: scaleX(0);
    background: linear-gradient(90deg, rgba(var(--color-primary-blue) / 0.85), rgba(var(--color-primary-pink) / 0.9));
    transition: transform 0.18s ease-out;
    pointer-events: none;
  }

  .progress-range {
    position: absolute;
    appearance: none;
    width: 100%;
    height: 100%;
    inset: 0;
    background: transparent;
    cursor: pointer;
    opacity: 0;
  }

  .progress-range:focus-visible {
    outline: none;
  }

  .progress-range.is-disabled {
    cursor: not-allowed;
  }

  .progress-range::-webkit-slider-thumb,
  .progress-range::-moz-range-thumb {
    appearance: none;
    width: 0;
    height: 0;
    border: none;
  }

  .time-chip {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-width: 3.5rem;
    padding: 0.35rem 0.75rem;
    border-radius: 999px;
    border: 1.5px solid rgb(var(--color-border-ink));
    background: rgb(var(--color-bg-body));
    color: rgb(var(--color-text-heading));
    letter-spacing: 0.1em;
    box-shadow: 3px 3px 0 rgba(var(--shadow-soft) / 0.16);
  }

  .live-indicator.live-active {
    background: rgb(232 82 74 / 0.9);
    color: rgb(255 248 235 / 1);
    box-shadow: 4px 4px 0 rgba(232, 82, 74, 0.28);
    gap: 0.35rem;
    padding-inline: 1rem;
  }

  .live-indicator.live-active::before {
    content: "";
    display: inline-block;
    width: 0.5rem;
    height: 0.5rem;
    border-radius: 999px;
    background: currentColor;
  }

  .live-indicator.live-offline {
    background: rgba(var(--color-border-ink) / 0.12);
    color: rgb(var(--color-text-muted));
    box-shadow: none;
  }

  .action-row {
    display: flex;
    flex-wrap: wrap;
    gap: 1.2rem;
    align-items: center;
    justify-content: center;
  }

  .player-control {
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.65rem 1.5rem;
    border-radius: 999px;
    border: 1.5px solid rgb(var(--color-border-ink));
    background: rgb(var(--color-bg-card));
    box-shadow: 6px 6px 0 rgba(var(--shadow-soft) / 0.16);
    cursor: pointer;
    transition: transform 0.2s ease, box-shadow 0.2s ease, background 0.2s ease;
    width: max(170px, 48%);
  }

  .player-control:hover {
    transform: translateY(-2px);
  }

  .player-control:focus-visible {
    outline: 2px solid rgba(var(--color-border-ink) / 0.4);
    outline-offset: 4px;
  }

  .player-symbol {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 2.2rem;
    height: 2.2rem;
    border-radius: 0.9rem;
    border: 1.5px solid rgb(var(--color-border-ink));
    background: rgb(var(--color-bg-body));
    box-shadow: 4px 4px 0 rgba(var(--shadow-soft) / 0.16);
    transition: background 0.2s ease, border-color 0.2s ease;
  }

  .player-icon {
    display: inline-block;
    width: 0;
    height: 0;
    border-style: solid;
    border-width: 8px 0 8px 13px;
    border-color: transparent transparent transparent rgb(var(--color-border-ink));
    transition: border-width 0.2s ease, width 0.2s ease, height 0.2s ease, background 0.2s ease;
  }

  .player-control.is-playing .player-icon {
    border-width: 0;
    width: 13px;
    height: 13px;
    border-radius: 0.25rem;
    background: rgb(var(--color-border-ink));
  }

  .player-label {
    font-size: 0.75rem;
    letter-spacing: 0.26em;
    text-transform: uppercase;
    color: rgb(var(--color-text-heading));
  }

  .player-control.is-live {
    background: rgb(64 181 123 / 0.92);
    box-shadow: 6px 6px 0 rgba(64, 181, 123, 0.35);
    color: rgb(8 42 23 / 1);
  }

  .player-control.is-live .player-symbol {
    background: rgb(255 253 245 / 0.9);
  }

  .player-control.is-live .player-icon {
    border-color: transparent transparent transparent rgb(8, 42, 23);
  }

  .player-control.is-live.is-playing .player-icon {
    background: rgb(8, 42, 23);
  }

  .player-control.is-offline {
    background: rgb(var(--color-primary-pink));
    box-shadow: 6px 6px 0 rgba(var(--shadow-soft) / 0.2);
  }

  .player-control.is-offline .player-symbol {
    background: rgb(var(--color-bg-card));
  }

  .player-control[data-live="off"]:hover,
  .player-control[data-live="on"]:hover {
    filter: brightness(1.02);
  }

  .volume-block {
    display: grid;
    gap: 0.4rem;
    min-width: 160px;
    width: max(200px, 48%);
  }

  .volume-kicker {
    font-size: 0.68rem;
    letter-spacing: 0.3em;
    text-transform: uppercase;
    color: rgb(var(--color-text-muted));
  }

  .volume-control {
    display: flex;
    align-items: center;
    gap: 0.7rem;
    color: rgb(var(--color-text-heading));
  }

  .volume-control .fa-solid {
    font-size: 0.8rem;
  }

  .volume-range {
    width: 120px;
    appearance: none;
    height: 0.25rem;
    border-radius: 999px;
    background: rgba(var(--color-border-ink) / 0.18);
    cursor: pointer;
  }

  .volume-range:focus-visible {
    outline: none;
  }

  .volume-range::-webkit-slider-thumb {
    appearance: none;
    width: 14px;
    height: 14px;
    border-radius: 999px;
    background: rgb(var(--color-bg-card));
    border: 1.5px solid rgb(var(--color-border-ink));
  }

  .volume-range::-moz-range-thumb {
    width: 14px;
    height: 14px;
    border-radius: 999px;
    background: rgb(var(--color-bg-card));
    border: 1.5px solid rgb(var(--color-border-ink));
  }

  .external-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.65rem 1.3rem;
    border-radius: 999px;
    border: 1.5px solid rgb(var(--color-border-ink));
    background: rgb(var(--color-bg-card));
    font-size: 0.8rem;
    letter-spacing: 0.2em;
    text-transform: uppercase;
    color: rgb(var(--color-text-heading));
    box-shadow: 5px 5px 0 rgba(var(--shadow-soft) / 0.16);
  }

  .external-link:hover {
    transform: translateY(-2px);
  }

  @media (max-width: 640px) {
    .radio-content {
      padding: 1.6rem 1.35rem;
      gap: 1.4rem;
      justify-items: center;
    }

    .radio-headline {
      gap: 0.75rem;
    }

    .player-surface {
      padding: 1.7rem 1.2rem 1.4rem;
      width: 100%;
    }

    .timeline-row {
      grid-template-columns: 1fr;
      gap: 0.35rem;
    }

    .timeline-row .time-chip {
      justify-self: center;
    }

    .action-row {
      flex-direction: column;
      align-items: center;
      gap: 0.75rem;
    }

    .player-control,
    .external-link {
      width: min(100%, 240px);
      justify-content: center;
    }

    .volume-block {
      width: min(100%, 240px);
    }

    .volume-control {
      justify-content: space-between;
    }

    .live-indicator {
      align-self: center;
    }
  }
</style>
</client:load>
