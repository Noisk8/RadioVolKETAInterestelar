---
import { readOne, readAll } from "../../lib/markdoc/read";
import { episodio } from "../../lib/markdoc/episodios.schema";
import PageLayout from "../../layouts/PageLayout.astro";
import PageMeta from "../../components/PageMeta.astro";
import { SITE_TITLE } from "../../config";

interface Track {
  title: string;
  audioUrl?: string;
}

export async function getStaticPaths() {
  const episodes = await readAll({
    directory: "episodios",
    frontmatterSchema: episodio,
  });

  return episodes.map((episode) => {
    return {
      params: { slug: episode.slug },
      props: { episode },
    };
  });
}

const { episode } = Astro.props;
const { title, description, audioUrl, imageUrl, tracks, date } = episode.frontmatter;

const formattedDate = new Date(date).toLocaleDateString("es-ES", {
  year: "numeric",
  month: "long",
  day: "numeric",
});
---

<PageLayout>
  <PageMeta title={`${title} | ${SITE_TITLE}`} description={description} slot="meta" />
  <main slot="main" class="episode-content">
    <article>
      <div class="header">
        <h1>{title}</h1>
        <time datetime={new Date(date).toISOString()}>{formattedDate}</time>
      </div>
      
      <div class="episode-card">
        <div class="image-container">
          <img src={imageUrl} alt={title} />
        </div>
        
        <div class="content">
          <p class="description">{description}</p>
          
          <div class="audio-player">
            <audio controls>
              <source src={audioUrl} type="audio/mpeg">
              Tu navegador no soporta el elemento de audio.
            </audio>
          </div>
          
          <div class="tracks-list">
            <h2>Lista de canciones</h2>
            <div class="tracks-grid">
              {(tracks as Track[]).map((track: Track, index: number) => (
                <div class="track-item">
                  <span class="track-number">{(index + 1).toString().padStart(2, '0')}</span>
                  <span class="track-title">{track.title}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </article>
  </main>
</PageLayout>

<style>
  .episode-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .header {
    margin-bottom: 2rem;
    text-align: center;
  }

  h1 {
    font-family: 'Londrina Solid', cursive;
    font-weight: 900;
    font-size: 3rem;
    color: #ee4a4a;
    margin-bottom: 0.5rem;
  }

  time {
    color: var(--text-muted);
  }

  .episode-card {
    background: var(--background-color);
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    border: 1px solid var(--border-color);
  }

  .image-container {
    width: 100%;
    height: 300px;
    overflow: hidden;
  }

  .image-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .content {
    padding: 2rem;
  }

  .description {
    font-size: 1.1rem;
    line-height: 1.6;
    margin-bottom: 2rem;
    color: var(--text-color);
  }

  .audio-player {
    margin-bottom: 2rem;
  }

  .audio-player audio {
    width: 100%;
  }

  .tracks-list {
    background: var(--code-inline-bg);
    padding: 1.5rem;
    border-radius: 8px;
  }

  .tracks-list h2 {
    font-family: 'Londrina Solid', cursive;
    font-size: 1.8rem;
    color: var(--text-color);
    margin-bottom: 1.5rem;
    text-align: center;
  }

  .tracks-grid {
    display: grid;
    gap: 0.75rem;
  }

  .track-item {
    display: grid;
    grid-template-columns: 40px 1fr;
    align-items: center;
    padding: 0.75rem;
    border-radius: 6px;
    background: var(--background-color);
    transition: transform 0.2s ease;
  }

  .track-item:hover {
    transform: translateX(5px);
  }

  .track-number {
    font-family: 'Londrina Solid', cursive;
    font-size: 1.2rem;
    color: #ee4a4a;
    font-weight: bold;
  }

  .track-title {
    color: var(--text-color);
    font-size: 1rem;
    line-height: 1.4;
  }

  :global(.dark) .episode-card {
    background: var(--code-inline-bg);
  }

  :global(.dark) .tracks-list {
    background: var(--background-color);
  }

  :global(.dark) .track-item {
    background: var(--code-inline-bg);
  }
</style>
